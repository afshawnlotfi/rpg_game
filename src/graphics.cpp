#include "graphics.h"

#include "globals.h"


static const int vader_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x646d74, 0x485256, 0x2e393c, 0x485158, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x030303, 0x0b0b0b, 0x030303, 0x000000, 0x030303, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x060606, 0x5c5c5d, 0x464646, 0x5c5c5d, 0x000000, 0x2c353b, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x060606, 0x0a0a0a, 0x010101, 0x2d2d2d, 0x010101, 0x000000, 0x060606, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x060606, 0x000000, 0x5c5c5d, 0x010101, 0x232222, 0x000000, 0x060606, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0x262626, 0x101010, 0x161616, 0x1a1a1a, 0x3b3b3b, 0x3e474e, 0x5e6970, 0x626b73, 0xff0000, 
0x616c73, 0x5b646b, 0x141414, 0x4f4f4f, 0x616161, 0x515251, 0x000000, 0x404a51, 0x6b757c, 0xff0000, 0x5c656c, 
0x5b646c, 0x000000, 0x000000, 0x303030, 0xa1241f, 0x323231, 0x0e0e0e, 0x232222, 0xff0000, 0x485158, 0x586068, 
0x000000, 0x010101, 0x000000, 0x1a1a1a, 0x0000fc, 0x202020, 0xeeeeee, 0x0b0b0b, 0x606970, 0x636a72, 0x4c535a, 
0x000000, 0x000000, 0x000000, 0x141414, 0x0e0e0e, 0x1a1a1a, 0x646d73, 0x32383f, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0x0e0e0e, 0x50575e, 0x606b72, 0x000000, 0x5e676e, 0x5b6269, 0x32383f, 0x2c3339, 0x565d64
};


static const int palpatine_top_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x646d74, 0x485256, 0x0f0e0e, 0x1b1b1b, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x5c656b, 0x475057, 0x000000, 0x141414, 0x282828, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x42484f, 0x2e353c, 0x0f0c0c, 0x0f0f0f, 0x1d1d1d, 0x2c353b, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x333b41, 0x30373f, 0x4c535b, 0x010101, 0x131313, 0x1a1a1a, 0x252322, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x525b62, 0x464f55, 0x000000, 0x010100, 0x1e1f1f, 0x050609, 0x151010, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0x646e75, 0x000000, 0x0f0701, 0x1a2832, 0x3a6d8f, 0x253d49, 0x0c0000, 0x626b73, 0x4f575e, 
0x616c73, 0x5b646b, 0x020000, 0x000101, 0x100000, 0x173e48, 0x77a3bf, 0x353d47, 0x000000, 0x5e676f, 0x5c656c, 
0x5b646c, 0x535c63, 0x000000, 0x000000, 0x161b16, 0x020304, 0x09131d, 0x010100, 0x171714, 0x485158, 0x586068, 
0x5a646b, 0x495259, 0x000000, 0x000000, 0x0c0f0a, 0x140f0f, 0x000000, 0x181714, 0x171412, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x0a0709, 0x010101, 0x010000, 0x000001, 0x000000, 0x010000, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x000000, 0x1c1c1c, 0x0a0a0a, 0x010101, 0x000000, 0x000000, 0x000000, 0x000000, 0x2c3339, 0x565d64
};

static const int palpatine_middle_data[121] = {
0x535e64, 0x000000, 0x1d1d1d, 0x050505, 0x060709, 0x050404, 0x000000, 0x121314, 0x070909, 0x465057, 0x566065, 
0x576268, 0x000000, 0x000000, 0x000000, 0x0c0e0f, 0x0f0f0f, 0x000000, 0x06090f, 0x222527, 0x555f66, 0x424c52, 
0x444c52, 0x1a1919, 0x181818, 0x000000, 0x010103, 0x020000, 0x94b6ca, 0x7191a7, 0x000000, 0x353b42, 0x272f36, 
0x4d565d, 0x100f12, 0x262826, 0x21201f, 0x090b0f, 0x000000, 0x3b576c, 0x335569, 0x120000, 0x323940, 0x4c545b, 
0x576068, 0x020204, 0x1c1b0d, 0x1f2e3b, 0x496476, 0x000101, 0x000000, 0x000000, 0x201c1a, 0x545c63, 0x5d656c, 
0x586268, 0x01050a, 0x160900, 0x284059, 0x7cb7dd, 0x4d6c83, 0x000000, 0x050b10, 0x181413, 0x626b73, 0x4f575e, 
0x616c73, 0x000000, 0x232020, 0x000000, 0x6e8fab, 0x596f83, 0x000000, 0x090e12, 0x141212, 0x5e676f, 0x5c656c, 
0x5b646c, 0x000000, 0x181713, 0x0a0403, 0x000000, 0x000001, 0x000000, 0x010101, 0x141212, 0x485158, 0x586068, 
0x5a646b, 0x000000, 0x131616, 0x08080a, 0x000000, 0x000000, 0x000000, 0x020101, 0x171412, 0x636a72, 0x4c535a, 
0x505960, 0x000000, 0x141414, 0x0b0b0b, 0x000000, 0x000000, 0x000000, 0x000000, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x000000, 0x0b0b0b, 0x070707, 0x050505, 0x000000, 0x000000, 0x000000, 0x32383f, 0x2c3339, 0x565d64
};


static const int palpatine_bottom_data[121] = {
0x535e64, 0x000000, 0x000000, 0x0d0f0d, 0x040404, 0x000000, 0x000000, 0x000000, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x010101, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x000000, 0x000000, 0x010101, 0x000000, 0x000000, 0x000000, 0x151110, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x000000, 0x000000, 0x020202, 0x000000, 0x000000, 0x000000, 0x1f1e1d, 0x040402, 0x626b73, 0x4f575e, 
0x616c73, 0x040403, 0x000000, 0x020202, 0x000000, 0x000000, 0x000000, 0x1f1e1d, 0x040402, 0x5e676f, 0x5c656c, 
0x5b646c, 0x030302, 0x060606, 0x060606, 0x000000, 0x000000, 0x020303, 0x1d1c1a, 0x090707, 0x485158, 0x586068, 
0x5a646b, 0x060505, 0x0d0d0d, 0x161616, 0x000000, 0x000000, 0x070909, 0x201e1e, 0x0a0606, 0x636a72, 0x4c535a, 
0x000000, 0x0e0c0b, 0x0f0f0f, 0x1a1a1a, 0x010101, 0x000000, 0x0f0f0f, 0x242322, 0x13100f, 0x454c53, 0x30393f, 
0x030101, 0x141413, 0x202020, 0x212121, 0x020202, 0x000000, 0x171717, 0x272626, 0x1f1d1a, 0x2c3339, 0x565d64
};




static const int holocron_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x646d74, 0x485256, 0x2e393c, 0x485158, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x5c656b, 0x475057, 0x545e62, 0x596367, 0x59636a, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x42484f, 0x2e353c, 0x445056, 0x5b656c, 0x535a61, 0x2c353b, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x333b41, 0x30373f, 0x4c535b, 0x282a18, 0x6b713a, 0x424726, 0x5a5f67, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x525b62, 0x464f55, 0x17190e, 0x6d7730, 0xd7e967, 0x8ea244, 0x262d12, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0x646e75, 0x373f14, 0x93ad29, 0xb7d63a, 0xa8c737, 0x52631a, 0x5e6970, 0x626b73, 0x4f575e, 
0x616c73, 0x5b646b, 0x667077, 0x333913, 0x8ba52b, 0xaccc2e, 0x98b329, 0x4b591a, 0x6b757c, 0x5e676f, 0x5c656c, 
0x5b646c, 0x535c63, 0x475058, 0x13150d, 0x5c6627, 0xb8cf42, 0x798b2b, 0x222713, 0x555e65, 0x485158, 0x586068, 
0x5a646b, 0x495259, 0x606970, 0x565d64, 0x1c1e12, 0x474e1e, 0x2f3416, 0x474e56, 0x606970, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x515960, 0x323a41, 0x545e65, 0x6a747b, 0x646d73, 0x32383f, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0x2d333a, 0x50575e, 0x606b72, 0x545e65, 0x5e676e, 0x5b6269, 0x32383f, 0x2c3339, 0x565d64

};


static const int wall_data[121] = {
0x232627, 0x262a2d, 0x23272b, 0x252a2e, 0x22252a, 0x212629, 0x262a2d, 0x26292c, 0x24282b, 0x23282c, 0x202428, 
0x24282b, 0x2e3336, 0x282d31, 0x2b3035, 0x2a2e33, 0x22272a, 0x2f3437, 0x2c3034, 0x272b2f, 0x2a2f33, 0x21262a, 
0x262b2f, 0x2f3439, 0x323840, 0x32373f, 0x2e3338, 0x21272b, 0x303539, 0x2f343a, 0x2d3338, 0x2d3238, 0x22272c, 
0x22262b, 0x272d32, 0x272c32, 0x282d34, 0x262b31, 0x1e2327, 0x21262a, 0x23292e, 0x21262b, 0x262b31, 0x20252c, 
0x282c30, 0x2e343a, 0x2e343b, 0x2d333b, 0x30373e, 0x2b3137, 0x2a2f34, 0x2b3137, 0x272d34, 0x262b32, 0x1f252a, 
0x2b3035, 0x31363e, 0x2b2f35, 0x2b3139, 0x363d47, 0x2e343b, 0x2d3238, 0x2b3035, 0x191e24, 0x0b0f12, 0x101519, 
0x282d31, 0x252a30, 0x23272c, 0x262b30, 0x3f4148, 0x30353b, 0x262a2e, 0x24282c, 0x21262b, 0x202529, 0x1d2226, 
0x222628, 0x21262b, 0x202529, 0x1c2125, 0x191e21, 0x1c2125, 0x212529, 0x212528, 0x21262b, 0x21262a, 0x1b2024, 
0x1d2124, 0x101316, 0x12171b, 0x12171a, 0x0b0e12, 0x111418, 0x15191c, 0x0f1316, 0x1d2126, 0x2d3138, 0x23282c, 
0x1c2023, 0x101417, 0x12161a, 0x0f1419, 0x111419, 0x0f1316, 0x181b1f, 0x0f1216, 0x1e242a, 0x272d37, 0x232930, 
0x1c2023, 0x15191d, 0x171c21, 0x161b20, 0x121619, 0x15191d, 0x1a1d21, 0x14181c, 0x1e242a, 0x22272f, 0x1f252b
};


static const int floor_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x646d74, 0x485256, 0x2e393c, 0x485158, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x5c656b, 0x475057, 0x545e62, 0x596367, 0x59636a, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x42484f, 0x2e353c, 0x445056, 0x5b656c, 0x535a61, 0x2c353b, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x333b41, 0x30373f, 0x4c535b, 0x576168, 0x4e585f, 0x585f66, 0x5a5f67, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x525b62, 0x464f55, 0x5c646b, 0x464f56, 0x4b545b, 0x4a5259, 0x575e64, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0x646e75, 0x4c545b, 0x495158, 0x5f666d, 0x475056, 0x3e474e, 0x5e6970, 0x626b73, 0x4f575e, 
0x616c73, 0x5b646b, 0x667077, 0x5c666d, 0x353b42, 0x343940, 0x333b42, 0x404a51, 0x6b757c, 0x5e676f, 0x5c656c, 
0x5b646c, 0x535c63, 0x475058, 0x616b72, 0x575e65, 0x30363d, 0x50585e, 0x616b72, 0x555e65, 0x485158, 0x586068, 
0x5a646b, 0x495259, 0x606970, 0x565d64, 0x515a60, 0x5c636a, 0x60686f, 0x474e56, 0x606970, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x515960, 0x323a41, 0x545e65, 0x6a747b, 0x646d73, 0x32383f, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0x2d333a, 0x50575e, 0x606b72, 0x545e65, 0x5e676e, 0x5b6269, 0x32383f, 0x2c3339, 0x565d64
};


static const int palpatine_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x0e0c0d, 0x161515, 0x222222, 0x0e0c0d, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x5c656b, 0x0e0c0d, 0x758aa1, 0x758aa1, 0x0e0c0d, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x42484f, 0x050404, 0x758aa1, 0x758aa1, 0x0e0c0d, 0x2c353b, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x333b41, 0x030101, 0x1d1d1d, 0x050504, 0x040403, 0x0e0c0d, 0x0e0c0d, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x525b62, 0x0e0c0d, 0x080809, 0x0a0d10, 0x758aa1, 0x0e0c0d, 0x0e0c0d, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0x040204, 0x222324, 0x758aa1, 0x010101, 0x0e0c0d, 0x0e0c0d, 0x5e6970, 0x626b73, 0x4f575e, 
0x616c73, 0x5b646b, 0x000000, 0x1c1c1d, 0x090c0f, 0x010000, 0x0e0c0d, 0x0e0c0d, 0x6b757c, 0x5e676f, 0x5c656c, 
0x5b646c, 0x535c63, 0x000000, 0x0e0e0e, 0x070707, 0x000000, 0x0e0c0d, 0x0e0c0d, 0x555e65, 0x485158, 0x586068, 
0x5a646b, 0x495259, 0x000000, 0x030303, 0x000000, 0x0c0b0a, 0x0e0c0d, 0x0e0c0d, 0x606970, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x060606, 0x101010, 0x000000, 0x161616, 0x0e0c0d, 0x0e0c0d, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0x181817, 0x1c1c1c, 0x020202, 0x1c1c1c, 0x141111, 0x0e0c0d, 0x32383f, 0x2c3339, 0x565d64
};
static const int trooper_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x646d74, 0x9b9b9b, 0xb6b6b6, 0x485158, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x5c656b, 0x8a8a8a, 0xf8f8f8, 0xfdfdfd, 0xd6d6d6, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x4b4b4b, 0xf8f8f8, 0x363636, 0x5d5d5d, 0x3a3a3a, 0x4b4b4b, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x333b41, 0x747474, 0x8b8b8b, 0x979797, 0x8a8a8a, 0x8c8c8c, 0x747474, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x525b62, 0xf8f8f8, 0xf8f8f8, 0x8a8a8a, 0x4d4d4d, 0xbbbbbb, 0xf8f8f8, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0x646e75, 0xf8f8f8, 0x696969, 0x4d4d4d, 0x303030, 0x282828, 0x5e6970, 0x626b73, 0x4f575e, 
0x616c73, 0x5b646b, 0x3d3d3d, 0x646464, 0xf8f8f8, 0xf8f8f8, 0x3e3e3e, 0x383838, 0x6b757c, 0x5e676f, 0x5c656c, 
0x5b646c, 0x535c63, 0x475058, 0xf8f8f8, 0x282828, 0x282828, 0xf8f8f8, 0x616b72, 0x555e65, 0x485158, 0x586068, 
0x5a646b, 0x495259, 0x606970, 0xf8f8f8, 0xf8f8f8, 0xf8f8f8, 0xf8f8f8, 0x474e56, 0x606970, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x515960, 0xf8f8f8, 0xf8f8f8, 0xf8f8f8, 0xf8f8f8, 0x32383f, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0x2d333a, 0xf8f8f8, 0x606b72, 0x545e65, 0xf8f8f8, 0x5b6269, 0x32383f, 0x2c3339, 0x565d64
};

static const int jedi_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0xcfd1cf, 0xcfd1cf, 0x2e393c, 0x485158, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0xaca9a6, 0x919fbb, 0x6e737c, 0x8e8985, 0x59636a, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0xc1c0bf, 0x6e7483, 0x6d7b97, 0x6d6868, 0x535a61, 0x2c353b, 0x373d44, 0x2edd21, 0x272f36, 
0x4d565d, 0x333b41, 0x5d4f44, 0x6b445a, 0x575262, 0x756568, 0x585f66, 0x5a5f67, 0x2edd21, 0x323940, 0x4c545b, 
0x576068, 0x525b62, 0x62635f, 0x6b445a, 0x764d65, 0x464947, 0x999e99, 0x2edd21, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0xcfd1cf, 0x3a4040, 0x4a504e, 0x707977, 0x808683, 0x3e474e, 0x5e6970, 0x626b73, 0x4f575e, 
0x616c73, 0x5b646b, 0xcaccca, 0x594e53, 0x694e5b, 0x767b78, 0x333b42, 0x404a51, 0x6b757c, 0x5e676f, 0x5c656c, 
0x5b646c, 0x535c63, 0x656565, 0x6b445a, 0x6f4e5f, 0x646564, 0x50585e, 0x616b72, 0x555e65, 0x485158, 0x586068, 
0x5a646b, 0x495259, 0x565455, 0x6b445a, 0x5f4d56, 0x555555, 0x60686f, 0x474e56, 0x606970, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x574e52, 0x846476, 0x676766, 0x434746, 0x646d73, 0x32383f, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0xdddedd, 0x50575e, 0x606b72, 0xb8bab8, 0x5e676e, 0x5b6269, 0x32383f, 0x2c3339, 0x565d64
};
static const int explosion_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x646d74, 0x485256, 0x2e393c, 0x485158, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x5c656b, 0x475057, 0x545e62, 0x596367, 0x59636a, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x42484f, 0x2e353c, 0x624535, 0x634a3b, 0x664c3d, 0x2c353b, 0x373d44, 0x353b42, 0x272f36, 
0x4d565d, 0x333b41, 0x30373f, 0x5c4637, 0x8d715b, 0xb5997d, 0xcbad8d, 0xac8f74, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0x525b62, 0x5e4432, 0x836753, 0xf2d5ae, 0xfff8cd, 0xfffbd0, 0xfde9bf, 0x8d725c, 0x545c63, 0x5d656c, 
0x586268, 0x59636a, 0x5d4435, 0xa0836b, 0xffeec4, 0xffffd3, 0xfffed3, 0xfce9c0, 0x7d6652, 0x626b73, 0x4f575e, 
0x616c73, 0x5b646b, 0x563f32, 0x8f715b, 0xf0d2ad, 0xfef3c8, 0xf9eac0, 0xd5b796, 0x6e5645, 0x5e676f, 0x5c656c, 
0x5b646c, 0x535c63, 0x475058, 0x5a4335, 0x8f715b, 0xc1a486, 0xaf9377, 0x816551, 0x555e65, 0x485158, 0x586068, 
0x5a646b, 0x495259, 0x606970, 0x565d64, 0x634839, 0x81604e, 0x7b614a, 0x474e56, 0x606970, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x515960, 0x323a41, 0x545e65, 0x6a747b, 0x646d73, 0x32383f, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0x2d333a, 0x50575e, 0x606b72, 0x545e65, 0x5e676e, 0x5b6269, 0x32383f, 0x2c3339, 0x565d64
};

static const int library_data[121] = {
0x16b9c1, 0x1298a9, 0x0a8da7, 0x11adc3, 0x094c7e, 0x182541, 0x36b9b0, 0xbfdadc, 0x3fa0ba, 0x24e3e3, 0x4bbdcc, 
0x0d93a6, 0x0a7992, 0x036384, 0x0a90b1, 0x083366, 0x172640, 0x2fc8bf, 0x76acb8, 0x1696b0, 0x17d6db, 0x179ab4, 
0x0b7589, 0x0e637c, 0x023e5e, 0x087299, 0x091f4c, 0x142e40, 0x27a6aa, 0x2a6478, 0x097d9d, 0x0a98b8, 0x08799b, 
0x345e70, 0x263c51, 0x143246, 0x093a5d, 0x101a33, 0x172b3c, 0x245f70, 0x234e5e, 0x126582, 0x0e5879, 0x0b4963, 
0x1a2531, 0x305556, 0x343d4c, 0x1c2d46, 0x0e5d6c, 0x103150, 0x1c576c, 0x19576f, 0x194f60, 0x0f3d52, 0x5c8590, 
0x1b3e43, 0x43988d, 0x99a7b2, 0x305770, 0x0e97a1, 0x0e5574, 0x1191a4, 0x248ea1, 0x219198, 0x0c4f67, 0x45b6b8, 
0x306b67, 0x6c9b9d, 0x3188a1, 0x15818d, 0x35b2bb, 0x1d8194, 0x20b3b8, 0x6da9b3, 0x22bdbc, 0x0b5571, 0x17bcb9, 
0x4b928c, 0x879aa4, 0x0a7999, 0x23b0b1, 0x6ab2c9, 0x33a3aa, 0x4ccdce, 0x93b0ba, 0x22b3b2, 0x198797, 0x52ced1, 
0x5aaba2, 0x8298a9, 0x045e85, 0x3cd1cb, 0x5097b0, 0x63babb, 0xb5eceb, 0x97adbb, 0x0d8c95, 0x33b6bb, 0x4cbdc7, 
0x53b3a8, 0x567f93, 0x02416e, 0x3cdcd1, 0x1a6f8c, 0x43b2b3, 0xa3e6e5, 0x5fa0ab, 0x025b74, 0x22c5be, 0x219cad, 
0x39968e, 0x2a5369, 0x0a3559, 0x14b1af, 0x085372, 0x21a6b4, 0x3cccc9, 0x247a89, 0x023457, 0x14a8ad, 0x0b738c
};



static const int key_data[121] = {
0x535e64, 0x576268, 0x5b636b, 0x646d74, 0x485256, 0x2e393c, 0x485158, 0x59636b, 0x444e56, 0x465057, 0x566065, 
0x576268, 0x424c53, 0x5c656b, 0x475057, 0x545e62, 0x596367, 0x59636a, 0x414b51, 0x475057, 0x555f66, 0x424c52, 
0x444c52, 0x394047, 0x42484f, 0x2e353c, 0x445056, 0x5b656c, 0x535a61, 0x2c353b, 0x373d44, 0x353b42, 0x272f36,
0x4d565d, 0x333b41, 0xa3a65e, 0xa4a54b, 0xa0a03b, 0x4e585f, 0x585f66, 0x5a5f67, 0x32383e, 0x323940, 0x4c545b, 
0x576068, 0xc5c138, 0xb4b661, 0x5f612c, 0xc5c138, 0xc8c436, 0x4a5259, 0x575e64, 0x5f666d, 0x545c63, 0x5d656c, 
0x586268, 0xc0b633, 0x9b9f66, 0x4c545b, 0xa3a02f, 0xece33b, 0xd5ac36, 0xc5c138, 0xece33b, 0xc5c138, 0x4f575e, 
0x616c73, 0xb4b661, 0xb4b258, 0x656124, 0xc0b633, 0xb08831, 0x333b42, 0xece33b, 0x6b757c, 0xece33b, 0x5c656c, 
0x5b646c, 0x8b7934, 0xa88c2d, 0x796424, 0x246479, 0x30363d, 0x50585e, 0x616b72, 0x555e65, 0x485158, 0x586068,
0x5a646b, 0x495259, 0x606970, 0x565d64, 0x515a60, 0x5c636a, 0x60686f, 0x474e56, 0x606970, 0x636a72, 0x4c535a, 
0x505960, 0x464e55, 0x515960, 0x323a41, 0x545e65, 0x6a747b, 0x646d73, 0x32383f, 0x42484f, 0x454c53, 0x30393f, 
0x565e65, 0x313940, 0x2d333a, 0x50575e, 0x606b72, 0x545e65, 0x5e676e, 0x5b6269, 0x32383f, 0x2c3339, 0x565d64
};

static const int sith_elder_data[121] = {
0x645e53, 0x686257, 0x6b635b, 0x746d64, 0x565248, 0x3c392e, 0x585148, 0x6b6359, 0x564e44, 0x575046, 0x656056, 
0x686257, 0x534c42, 0xe72222, 0x900707, 0x625e54, 0x676359, 0x6a6359, 0x900707, 0xe72222, 0x665f55, 0x524c42, 
0x524c44, 0x474039, 0x900707, 0x900707, 0x565044, 0x6c655b, 0x615a53, 0x900707, 0x900707, 0x423b35, 0x362f27, 
0x5d564d, 0x413b33, 0xc03333, 0xc03333, 0xc03333, 0xec4545, 0xc70000, 0xc70000, 0xc70000, 0x403932, 0x5b544c, 
0x686057, 0xc03333, 0xec4545, 0x600000, 0x600000, 0xc70000, 0x600000, 0x600000, 0xec4545, 0xc70000, 0x6c655d, 
0x686258, 0x9d1d1d, 0xec4545, 0x600000, 0x600000, 0x900707, 0x600000, 0x600000, 0xec4545, 0x9d1d1d, 0x5e574f, 
0x736c61, 0xc03333, 0x9d1d1d, 0xe72222, 0x900707, 0xe72222, 0xd27272, 0xe72222, 0x9d1d1d, 0xe72222, 0x6c655c, 
0x6c645b, 0x635c53, 0x9d1d1d, 0xe72222, 0x9d1d1d, 0xc70000, 0xc70000, 0xe72222, 0xc70000, 0x585148, 0x686058, 
0x6b645a, 0x595249, 0xf01515, 0x900707, 0x605a51, 0x600000, 0x6f6860, 0x900707, 0xf01515, 0x726a63, 0x5a534c, 
0x605950, 0x554e46, 0xf01515, 0x600000, 0x655e54, 0x7b746a, 0x736d64, 0x600000, 0xf01515, 0x534c45, 0x3f3930, 
0x655e56, 0x403931, 0x3a332d, 0xf01515, 0xf01515, 0xf01515, 0xf01515, 0xf01515, 0x3f3832, 0x39332c, 0x645d56
};


void draw_sith_elder(int u, int v)
{
      draw_img(u, v,sith_elder_data);
}


void draw_key(int u, int v)
{
      draw_img(u, v,key_data);
}


void draw_library(int u, int v)
{
      draw_img(u, v,library_data);
}


void draw_explosion(int u, int v)
{
      draw_img(u, v,explosion_data);
}


void draw_palpatine(int u, int v)
{
      draw_img(u, v,palpatine_data);
}

void draw_trooper(int u, int v)
{
      draw_img(u, v,trooper_data);
}

void draw_player(int u, int v, int key)
{
      draw_img(u, v,vader_data);
}

void draw_jedi(int u, int v)
{
      draw_img(u, v,jedi_data);
}

void draw_gameover()
{
    uLCD.cls();


    uLCD.text_string("Game Over", 5, 8, FONT_5X7, WHITE);



}





void draw_img(int u, int v, const int *colors)
{
    
    uLCD.BLIT(u, v, 11, 11, (int *)colors);
    wait_us(250); // Recovery time!
}

void draw_nothing(int u, int v)
{
    // Fill a tile with blackness
    draw_img(u, v,floor_data);
}

void draw_wall(int u, int v)
{
    draw_img(u, v,wall_data);
}

void draw_plant(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, GREEN);
}


void draw_door(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
}


void draw_holocron(int u, int v)
{
      draw_img(u, v,holocron_data);
}


void clearScreen(){
    uLCD.filled_rectangle(0, 0, 127, 9, BLACK);
}

void clearStatus(){
    uLCD.filled_rectangle(0, 0, 127, 9, BLACK);
}

void draw_upper_status(char* status)
{
    // Draw bottom border of status bar
    //uLCD.filled_rectangle(0, 0, 127, 9, RED);
    //uLCD.line(0, 9, 127, 9, GREEN);

    uLCD.text_string(status, 0, 0, FONT_5X7, WHITE);

    // Add other status info drawing code here
}

void draw_lower_status(int health, int holocrons_collected)
{
    char buffer [50];
    sprintf (buffer, "HEALTH:%i HOLO:%i",health,holocrons_collected);

    // Draw top border of status bar
    uLCD.line(0, 118, 127, 118, GREEN);
    uLCD.text_string(buffer, 0, 15, FONT_5X7, WHITE);
    // Add other status info drawing code here
}

void draw_border()
{
    uLCD.filled_rectangle(0,     9, 127,  14, WHITE); // Top
    uLCD.filled_rectangle(0,    13,   2, 114, WHITE); // Left
    uLCD.filled_rectangle(0,   114, 127, 117, WHITE); // Bottom
    uLCD.filled_rectangle(124,  14, 127, 117, WHITE); // Right
}


